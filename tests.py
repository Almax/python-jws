import os
import unittest
import time
from jwt import utils
from jwt.jws import JWS, InvalidHeaderError, DecodeError, SignatureError
from jwt.jwk import JWK
import jwt

class TestJWT(object):

    def setUp(self):
        self.payload = {"iss": "jeff", "exp": int(time.time()), "claim": "insanity"}

    def test_encode_decode(self):
        secret = 'secret'
        jwt_message = jwt.encode(self.payload, secret)
        decoded_payload = jwt.decode(jwt_message, secret)
        self.assertEqual(decoded_payload, self.payload)
    
    def test_bad_secret(self):
        right_secret = 'foo'
        bad_secret = 'bar'
        jwt_message = jwt.encode(self.payload, right_secret)
        self.assertRaises(jwt.DecodeError, jwt.decode, jwt_message, bad_secret)
    
    def test_decodes_valid_jwt(self):
        example_payload = {"hello": "world"}
        example_secret = "secret"
        example_jwt = "eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJoZWxsbyI6ICJ3b3JsZCJ9.tvagLDLoaiJKxOKqpBXSEGy7SYSifZhjntgm9ctpyj8"
        decoded_payload = jwt.decode(example_jwt, example_secret)
        self.assertEqual(decoded_payload, example_payload)
    
    def test_allow_skip_verification(self):
        right_secret = 'foo'
        bad_secret = 'bar'
        jwt_message = jwt.encode(self.payload, right_secret)
        decoded_payload = jwt.decode(jwt_message, verify=False)
        self.assertEqual(decoded_payload, self.payload)
    
    def test_no_secret(self):
        right_secret = 'foo'
        bad_secret = 'bar'
        jwt_message = jwt.encode(self.payload, right_secret)
        self.assertRaises(jwt.DecodeError, jwt.decode, jwt_message)
    
    def test_invalid_crypto_alg(self):
        self.assertRaises(NotImplementedError, jwt.encode, self.payload, "secret", "HS1024")
    
    def test_unicode_secret(self):
        secret = u'\xc2'
        jwt_message = jwt.encode(self.payload, secret)
        decoded_payload = jwt.decode(jwt_message, secret)
        self.assertEqual(decoded_payload, self.payload)

class TestJWS(unittest.TestCase):
    def setUp(self):
        self.payload = {'arbitrary': 'data', 'anything': 'at-all'}
    
    def test_validate_header(self):
        valid_header = {'alg': 'HS512'}
        u_valid_header = {u'\u0061lg': 'ES384'}
        invalid_header = {'missing_alg': True}
        invalid_algo_header = {'alg': 'ROT13'}
        jws = JWS()
        
        self.assertRaises(InvalidHeaderError, jws.set_header, invalid_header)
        self.assertRaises(InvalidHeaderError, jws.set_header, invalid_algo_header)
        
        # should not raise exceptions
        jws.set_header(valid_header)
        jws.set_header(u_valid_header)
        
    def test_sign_with_hmac(self):
        header = {'alg': 'HS256'}
        jws = JWS(header, self.payload)
        key = 'suprsecret'
        crypto_output = jws.sign(key)
        
        bad_header = JWS({'alg':'HS512'}, self.payload)
        bad_payload = JWS(header, {'droids':'looking for other ones'})
        
        self.assertRaises(SignatureError, jws.verify, crypto_output, 'notsecret')
        self.assertRaises(SignatureError, bad_header.verify, crypto_output, key)
        self.assertRaises(SignatureError, bad_payload.verify, crypto_output, key)
        try: jws.verify(crypto_output, key)
        except SignatureError, e:
            self.assertTrue(False, "Valid signature should not raise SignatureError")
    
    
    def test_sign_with_rsa(self):
        header = {'alg': 'RS256'}
        jws = JWS(header, self.payload)
        
        # DER format keys, exported from RSA.generate(2048, Random.new().read)
        private_key, public_key = ('0\x82\x04\xa5\x02\x01\x00\x02\x82\x01\x01\x00\xbf=k\xc1&\xbb\r\xa0\xbe\xdcw\xf2\x97\xc7stW,R.\xdb\xea0\xc6\xbca\xf8\xe1\xb7O]X\xc0\x80>\xd88\x1d\xa0\xf9\xe5B\xac,\xc4\xd8\xae\x1d\xc9\xfb\xa8 \xc6\x03\x93R\xde\x82\x07\xab\xd9\xc4ut\x1di\xfao\xfe\x92\x01\xef\xe4R\xe4\xeev@\xb5Y3\x9e\xc8\n\x9d\x82D\xbcO\xce\x02\x1c\x1fX?\x0b\xc5\x0f\x957;U\xc0o\xb2L\xe6\x95\x8b\xb2Vq<7\xf1\xe3\xbe\x05\xfc\xc1\xb8-\xe7\xfdn\xab\xfb\xd2\x14\xad\xb8\xd2\x8e\x96!\xcal\xb7n\x16%\xcf\x0b\xa9\xe8\x8d\xe73s\xf3\xed\'\xc7\xd1`\x00\xecK\xfe\xd8\x1b\x11\x06\xf3S\xd1\xd6\x81X\x03g\xf3\x1d\xba\xfek\x15\xe0\xfa\xbc\xc2\xd0)(\xfdi\x10\xd0\xd7\x85\xfaS\x7fAm\xc4\xa5\x02\x9b\xd0<\xfe\x1b\x95\x08\xdf\xc6\xb5\xbaN\xfa\x10\x14\xb8\xbee\xcb\xb2\x83`\xb5\x82\x814\xf7\xa0\xd8r\xe1ejp}\x9c\x8b\x17{R\xbbh(\x1c\xbf\x9dD\xdck\xd6\xa4 \xe84\xfe\xa6\x8f\xf1\x02\x03\x01\x00\x01\x02\x82\x01\x00S\xba;t\x1cU\xe6\xf8\x8a\xb7\x91\xd8guNj\x10DzR\xc3\xbb\xbb\xd16\xe7\x1a\x05\x10\xb1\xb1\xa7\xca\xd8\x1b+\xa5\x1d\xeb\xbd\x9d\x0f\\\xbcY\x0e\x98\xe4\xb7\xea\xf3H.\t\xa0\xb5\xb6om\x96b\xc8m\xb8\x01\xac\xc5\x95\xc4\xf9\xfd\xd9\x1e\xb8\xe0<;\x0f\xc7\x96\x1fP\x94:y\x8dp4\x96(\x16\xaacZ\xcaw\x87\xb6s\xd8\xf3\xa4n\x958\x96\x0c\x9aJ\xc80\xaap\xf7\xf9r\x81^\xb3\xb3\xc8\xc4h~\x7f\xb6\xd2\x8f\xfc\xf8l\xd1\xfa\x0e\x0f\xa3i\xed\xf0D|[\xd5K\xce\xacc\x07\xfc\xa9\xc85\xdf\x10\x90\xb2\xee/ \xfaT\xfd\x11\x96\x12\x9e,\xf4\x8b\xe6\xa1\x9c\x19`\x8f\\\x96\x01c\x0c\x88\xaf\x0eV8\xf9\xa2\x0b\x8d\xc6]\x86)\x8d6\xd0\x88d+o\xc9Q Ww\xd2\xb7\x9c\x15\xec\x15\xe2\xdcU\xe2\xc3\x0e%Y\x82\xf1?\'d\x90\x92+\x91u\x06\xd9\x8bE \xf0H\xb0\x18\x84*\xba\xeb\xc9a{w\xc3\xa8;\xdcl\xfc\xcb\xc2nA\x02\x81\x81\x00\xdd\x10\xb3\x1d\xa1\x0b\x97C\x85Y\xfc\xf3\x02\x1f\xb6&\x82\xe8h\x0c\xd1\xef}\x12\x8a\xc9?\xf8WUR\x80\xe24\xe3t\xa1\xa1\xf7;\xf9<\xc7o\xe3f\xf4E\xfa"\xf6\x89AV\xb0\x07\xac(\xdd\x08q\xd2uS\r\x07{\xcc\xa0o<\x89:\xd75,\xce\xaf\x04\xb3\x94\xf8Xr\xd9b\xc33i\x055\xccY\x14 \x9e\x0b)\x1dh\xed\xb5(E\x90\xd4\x1e\xbc;\xbe\x1f\x99)\x1c>\xd85\xd5\x89\x83\xcf\x0b\xa7T\xd8\xb3a)\x02\x81\x81\x00\xddv\x1f\xc3\xb1\xea4\xb81e\x9c\xde\x8a\x8bQ\xa0`HX&;\xee\xf6\xaf\x14!\x15\t\x82\xc5`\xa4\\\xc24\xc1\xfe>\xc2\x06\xea\xd0\x88\xea\x8d\xd7r\x1al\xe8\x00\xc6\x9d\\\n\x07\xcc.\r\xff\x0e&g\xeb\x8c\xd4\x18\xcc\xbe\x810\xcb@\xc6\xc95|xzm\xbb`\xf6\xf8\xc7`\xdf\xc9\xf1\xe6\x18I\x1d`\xd6<\xef\xb5qov\'\x18K\xa5\x1c=\xfb\xa7~_`\x9e\xec\xc3\xc7\xe1!6>\x87\xb4\x8a6vX)\x89\x02\x81\x81\x00\xc1\xa1\xab\x02<\xd9\xa68\xe2I\x1c"\xce\xadp"\xf3o\x16\x14\x84\x9e<\xf3L\xd5RN\xf8P\'\xdf\xf4CW(\x05\x9b\x94\xae\xd7t\xc1K\xe3\xe7}\xf6\xfdN:\x9b\xa6\xbb\x83\x9ct\xd3\xa6\'\x8bkH\x90\xe2L\xb7\xc7X\x8f\x96z\xad+k\xcc?\x8dU\x94\xe6\xdbP\xbd\xe8cu\x8fFa\xe5\xe9\x83\xec\xf9T\xf5y\xa1\xe5\x12\xb1\'\x01(\x06d\x95\x83\xce\xd8f\x93w\xc6$#\xa3R\xbc=R{\xd2\xf9\xac\xc5a\x02\x81\x81\x00\xb4~\x02sw<\x7f\x8d#MB\xa5\xa9Z\xd4\xc3\x15\xd5\xc0j \xec\xa8\x86\x96\xacC\xbe\x05\xa3\xa2\x1934`\xd5>\xc6\x9dR\x0f\xec\xb7\xba\x1a\xb2]\xdf\xa5\xa5\x0c\x84\xd3Ya\x1fk\xcc\x99A\xa7\xa1\xab\x8e\xb1\xafg*\xef\x94\xd1T\xc6M}M\xa7Mu\xd2\x9b%\xf3\x03]S\xd9\xf0w\xc3eE\xa9\xb8\xf3\xc2\xa4GG\xd5e\x01\x85\xee\x98\xf9\xc4\x96\xa6\xb2\xfb>\xff\'\xce\x84\xc8:N@vO\xb1Y\xa3\xe8D\xa9\x02\x81\x81\x00\x95\xa7\x8eR\x87\x0c\xa8F\xdb\x9d)\xc1\xfbql\x86\xe8s\xeab\x82\xedz\xd8\xe2\xd5g3;l\x84aO5[8_\x95\xd4\xb4gg\x8e\xe9\x8d\xb3\x8b\xf3\x06_\xec\xd3\xd9R\x1d7\x1e\xe9?\xbd\x13\xa3\xa3<\x9c\x93\x96s\x92\xc5Z\x1a\x86D^\xe1\xf1\xca\xea\xb4Ov\xea$\x87\x88\x14"\x15\x87\x1a0\x0b\xa9THm`E\xb9O4\xda\xf5\xf4\xdbY\x0f\x10\xe3\x15\xbf\xa4Ys\xb4\xde%(\xd4o\xa5\x02\xa5.7\x8f\x04', '0\x82\x01"0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\x00\x03\x82\x01\x0f\x000\x82\x01\n\x02\x82\x01\x01\x00\xbf=k\xc1&\xbb\r\xa0\xbe\xdcw\xf2\x97\xc7stW,R.\xdb\xea0\xc6\xbca\xf8\xe1\xb7O]X\xc0\x80>\xd88\x1d\xa0\xf9\xe5B\xac,\xc4\xd8\xae\x1d\xc9\xfb\xa8 \xc6\x03\x93R\xde\x82\x07\xab\xd9\xc4ut\x1di\xfao\xfe\x92\x01\xef\xe4R\xe4\xeev@\xb5Y3\x9e\xc8\n\x9d\x82D\xbcO\xce\x02\x1c\x1fX?\x0b\xc5\x0f\x957;U\xc0o\xb2L\xe6\x95\x8b\xb2Vq<7\xf1\xe3\xbe\x05\xfc\xc1\xb8-\xe7\xfdn\xab\xfb\xd2\x14\xad\xb8\xd2\x8e\x96!\xcal\xb7n\x16%\xcf\x0b\xa9\xe8\x8d\xe73s\xf3\xed\'\xc7\xd1`\x00\xecK\xfe\xd8\x1b\x11\x06\xf3S\xd1\xd6\x81X\x03g\xf3\x1d\xba\xfek\x15\xe0\xfa\xbc\xc2\xd0)(\xfdi\x10\xd0\xd7\x85\xfaS\x7fAm\xc4\xa5\x02\x9b\xd0<\xfe\x1b\x95\x08\xdf\xc6\xb5\xbaN\xfa\x10\x14\xb8\xbee\xcb\xb2\x83`\xb5\x82\x814\xf7\xa0\xd8r\xe1ejp}\x9c\x8b\x17{R\xbbh(\x1c\xbf\x9dD\xdck\xd6\xa4 \xe84\xfe\xa6\x8f\xf1\x02\x03\x01\x00\x01')
        bad_private_key, bad_public_key = ('0\x82\x04\xa3\x02\x01\x00\x02\x82\x01\x01\x00\xbaQ\xe4\xe7W=\xa0\x7f\x04\xcf\xee2\x9c\xf7=\xbf\x92z\x91\x9f\x9e\xbd(\x89\x14\xc3\t\xbc\xbb\x8c\x8a-\xbc\x96\xbc\x15\xe7\x14/\xd6\xb5\x9bB\x9e\xee\xdc\xa1\xa3\xd8a\x85,\xdc\xd4\xd3\xf9\xed"\xb7)\xcf\xc42z\xb2\xd8\xcc\xd9\xc2\xed!G\x8d\x03(2\xd8\r\xc7\x1f\x0e}\x9f"Q\xa5_$\xb5P\x13\xdc\xb1\x08z,e\x8f.gE|\x08\xf8\x8b\x96\xf9\x92O\xd7=RY\x8b\xe8\xb6g\x840E\x08%\xb7b*\xcd\x7f?\x93\xa6\xe0\x93\x88s\x93\xdd\x95\x0cY\xbb\xc9-DS\xf65\xb7\xd4v\xff\x13\xdf\x87\xb17\']\xf0\x0f\x9eh\xe2\x15\x19\x1c\x8c\xd3\x15&E4\xe9G\xae\xa6\x1al\x94\x8a\xcf\x8aZ\xe5\x1d(\x07\xe1\xef\xfdR\x9f:yu\xef\x01|\xb5Fa\x96\xc8\x05\x1c\x97l^\x0c.\x1a>\xad @T*\xd5\xd0\xd0nM\xadRb#a\x97\xa3%\xaa+\x00[(\xb4\xb2\x8d#\xed\xc0\xa2c0\xb1\xa4\x1ci\xe9~\xd1/\x03\xe6}Z\xaf\x02\x03\x01\x00\x01\x02\x82\x01\x0084\xa02\xd1t{\xc8\x15q\x8cO\xa4^I8S=\xbaTF\x94\x95w\xd4\xd5\x89Ho\xe3S\x83\xbc\x92T&\xdfP\x8d\xa5\xdd\x9e\xfa\x97\xebB\x8fXW\xdc\x03J\xa7Kd\xae\xceD\\\xb0\xb6F_[\xf8;\xc2\x80&wVD\xb9[,s:\r\xdd\xf5\x96oz\xe3\xe5qW\xa4A5\xe8\xe7\xf8W\xb0SXG\xbb\x1d\xd8.4\x9e\x95\xads\x98\x19\x91\xba\xa3\xee\xf3o\xbe&\xb8\x0f\xbf\xa3W\x8d\\\x85\xc0\xfc\x13s\xb3\xe2\x8bg\x89\xd3\x03\xe5\x18\x1a\xcb\xe0\x92nkR[j\xd6\xccb\xd8R\x01\xe3\'\xcf\xb0\xfcT\x9d\xc6:u\x9c\x8d\xb3HV\xd9\xdf\x1bcu\xf4q0]\xb5\x96\xb2\xaa y\xc8\x8a\xad\xa7<ifG\xaa\xc92hk\x91\x9b\x1f\x85K0\x85D\x17\xc4IK\x9cq>\xe8Q\xf5*\x18\x9aE\x97\x9b\xb7\xad!wC\xe1.\xe4\xec\x8c\xc4@\xe6B8YC\xc7\xbc\x9f\xd2B\x85\xf6"\xd2KD\xcd\x97\x85\xe7\xb5 \xb5A\x02\x81\x81\x00\xcc\xde\xea8L\xe9b\x85\x07\xdd\x16\xac\x00\n8\r\x0f\xf6O.mh\xdeO\x9e\r\xd1\x8aT\xa3U\xd0\xb0`S\xd02h\xac\x95G=\x94%{\xc2j\xde\xcb\xe3\xf0\xee\x95j\xbbso\xe8\xf2\x03\xc4\xadC\xd7y\x12yHB\x17T\xd9\xfb\xe6\xb5\x1e9\x1e\x8d\xe6"\xe9\x9a\xa4X\xf4g\xbf\xe6\x99\xdbj4J\xa6]L\xab\x17K\x06\xeeuR\x02IM\x15&aN\xf4\xd0,\xcf\x04\x91\x03\xfb\xc4.\x1f\\J\xeb\xcc\x8dq\x02\x81\x81\x00\xe8\xd1\xc6?V\xec~eD\x137M\xe5\x989\x08\x16M\xf2\xa7\xc1\xb9\x93\x96\x0c9\x037ti\xafI\xa8"\xebTl\x12\x9d\xf6\xe5\x17&~l\xbf\xe1&Z\x9ce@F\xa8*\xff\x19.\xf1s*\xa6\xf2\xe6\xaeF\xe6F\x9a\xd8%\xae\xba8\t\xd4\x16\xf9\xf7\xd3M\xb5\xde\x1aSvW\xec/\x8a\xd7y\xbc\x81>\x13\xd7\x8f\xcc\xcb\x0f\xd1\xf2\r\x9e^1PS\xebguO\x9a\xf0\x9f\x9f\x9c\x88\xadD\x84\xb74\x01\xa6\xda\x1f\x02\x81\x80?\xf0\x9a\x9d3\xb3\xeba\xa5\x90\xa5\x10\xcdzc\x00\x00\xa9Y\x11\x1eh\x8ai\xc2\xe4\x81/q7\x01\x03~\xe8\xb1\x7f\xdb\x1b\xbc1b\xe8\x9f"\x0b\xbc#\xea\xa1+\xe4\xf81}\xfc?\r\x00`\xf88\x1b\xf3~~t\xfb\x91G\xbfLf4.N\xfc\xbd\xcb\x01r\x80\x16\xf4\x82\xb2\x98\xa5\x00\xc9\x91\xdf_\x08.\xfc9FBg\xa4\xac\xe7#\x8a\x92\xd8\x19\xcc\xae\x0b\xd4\xbe\xa7r4\xb22(R\x1dj_\xb3HV\xcb\xa2\xa1\x02\x81\x80s{\xfa\x96X\x8b\x9ev\xa4\xb9\xd3h\xf4E\xf9\xa4%L,\xddA\x9e\xc7\xb2Z\x05\xbd\xae\xb83\xe4\x1a\xe9\'\xc9\x0bk@ \xd2\xe2\xf8\x04\xc4\x195d}\x1d\xdd\r\xec@ \x12\x93\xce\xee\x16\x1eF=\xe1\xa6\xc33\xaf\xed\xbd\xc9\x11\x88\x06\x1e\xdd\xe124s\xd5\x80j\x81\xed\x15\x11R\xb3y1\xa9\x88]\x14\xce\xb2\x10\xee\xe7j\xa2BE\x8a\xb3\xcf\x8d.\x871\xf1s\xa34\xfb\xbeq\xf1\xb7j\x1a\xde\xa9\xf1F\x10y\x89\x02\x81\x81\x00\xa8\xc8\xdf\x08\xeb\x1e\tN\x1c\x1b\xd3\x97\x01%\xef\xc7\x8ftb \xde\xb12\xaa\xbc4\xab\xac\xf9?G\x04p\xcfBt\xae\xe7G\xd7\xc894\xde\xa8 d\xf4E\x83\x92Q5\xa6\xfc\x84\x98QE_D\x13\x04\xe8\xb4\xf3)\xce\xc6sh\xab]\x1d\xddo0\x89\xdd\xb5\x12d*\x1a2"\x18\'Ug\x86f\x8a\x1a\xbd$\x11\x10\xdd\r\n\xd9\x05%\x9c\'\x89\x98\xac;\xa1\xdb\x0e\xa5\xc5\x04\x05\xd8GR\x90\x04\x8c\xa3m\xa4\x1b\x9a', '0\x82\x01"0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\x00\x03\x82\x01\x0f\x000\x82\x01\n\x02\x82\x01\x01\x00\xbaQ\xe4\xe7W=\xa0\x7f\x04\xcf\xee2\x9c\xf7=\xbf\x92z\x91\x9f\x9e\xbd(\x89\x14\xc3\t\xbc\xbb\x8c\x8a-\xbc\x96\xbc\x15\xe7\x14/\xd6\xb5\x9bB\x9e\xee\xdc\xa1\xa3\xd8a\x85,\xdc\xd4\xd3\xf9\xed"\xb7)\xcf\xc42z\xb2\xd8\xcc\xd9\xc2\xed!G\x8d\x03(2\xd8\r\xc7\x1f\x0e}\x9f"Q\xa5_$\xb5P\x13\xdc\xb1\x08z,e\x8f.gE|\x08\xf8\x8b\x96\xf9\x92O\xd7=RY\x8b\xe8\xb6g\x840E\x08%\xb7b*\xcd\x7f?\x93\xa6\xe0\x93\x88s\x93\xdd\x95\x0cY\xbb\xc9-DS\xf65\xb7\xd4v\xff\x13\xdf\x87\xb17\']\xf0\x0f\x9eh\xe2\x15\x19\x1c\x8c\xd3\x15&E4\xe9G\xae\xa6\x1al\x94\x8a\xcf\x8aZ\xe5\x1d(\x07\xe1\xef\xfdR\x9f:yu\xef\x01|\xb5Fa\x96\xc8\x05\x1c\x97l^\x0c.\x1a>\xad @T*\xd5\xd0\xd0nM\xadRb#a\x97\xa3%\xaa+\x00[(\xb4\xb2\x8d#\xed\xc0\xa2c0\xb1\xa4\x1ci\xe9~\xd1/\x03\xe6}Z\xaf\x02\x03\x01\x00\x01')
        
        crypto_output = jws.sign(private_key)
        bad_payload = JWS(header, {'droids':'looking for other ones'})
        
        self.assertRaises(SignatureError, jws.verify, crypto_output, bad_public_key)
        self.assertRaises(SignatureError, bad_payload.verify, crypto_output, public_key)
        try: jws.verify(crypto_output, public_key)
        except SignatureError, e:
            self.assertTrue(False, "Valid signature should not raise SignatureError")
    
    def test_sign_with_ecdsa(self):
        header = {'alg': 'ES256'}
        jws = JWS(header, self.payload)
        
        # short form, generated from SigningKey.generate(NIST256p).to_string. Need curve to regen.
        signing_key, verifying_key = ("\x07\xd9'mb^\xe2\x0f\x02\xa38 \x19\x84J\x93\xafT2\x98x@u\x89\xcf[^\xf4\x88\xda\xcc\xf3", '\nnZ\x8c\x97\xd0{\xc8.2\\\xf9Y\xa5C\x01\xc6\xc5\x05\x07\xaf\x92\xd7\xf1V\xc8?S8~\x00k\xaaV\xffqc2\xd7_B\xa0\x02\xd3\x1b\xf1k\x02\xda\x82\xe5\xf4\xb1\x1e\x8c\x80\xaf\xe3\x10\xa6\x846\x0f\xe5')
        bad_signing_key, bad_verifying_key = ('Q\x91P\xdc\xc1r\x83\xab\xc3\xdb\x1am\xf5\x19S{\xcb\xb2\x17S\xc5"ID^\xb0r\xe6\x18\xa5\x90\xd8', "\x05}\xa3\x8cR\x87K\x0f\x03/\x0f|\xdc0F\xc2\x02\x80j\xa1\x0e\xb0\xf6\xdd1\xd9\xd8\x01X\x9e\x8f@'\xb9T&\xdd\x99\x08\xa6~H\xaa\x0f%\xae\x03U\xeb<O\xbc)\xaf'\x0c<\xe0cr\x8fk/\xf7")
    
        crypto_output = JWS(header, self.payload).sign(signing_key)
        bad_payload = JWS(header, {'droids':'looking for other ones'})

        self.assertRaises(SignatureError, jws.verify, crypto_output, bad_verifying_key)
        self.assertRaises(SignatureError, bad_payload.verify, crypto_output, verifying_key)
        try: jws.verify(crypto_output, verifying_key)
        except SignatureError, e:
            self.assertTrue(False, "Valid signature should not raise SignatureError")


import ecdsa
class TestJWK(unittest.TestCase):
    def test_ecdsa_output(self):
        vk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p).get_verifying_key()
        decode = utils.base64url_decode
        webkey = JWK.from_key(vk)
        self.assertEqual(vk.pubkey.point.x(), long(decode(webkey['x'])))
        self.assertEqual(vk.pubkey.point.y(), long(decode(webkey['y'])))
        self.assertEqual(webkey['algorithm'], 'ECDSA')
        
    def test_ecdsa_input(self):
        sk = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)
        vk = sk.get_verifying_key()
        decode = utils.base64url_decode
        
        webkey = JWK.from_key(vk)
        newkey = JWK(webkey).to_key()
        
        msg = 'But I was going into tosche station to pick up some power converters!'
        sig = sk.sign(msg)
        
        self.assertTrue(vk.verify(sig, msg))
        self.assertEqual(newkey.pubkey.point.x(), vk.pubkey.point.x())
        self.assertEqual(newkey.pubkey.point.y(), vk.pubkey.point.y())
        self.assertEqual(newkey.curve.name, vk.curve.name)
        self.assertTrue(newkey.verify(sig, msg))
        
if __name__ == '__main__':
    unittest.main()
